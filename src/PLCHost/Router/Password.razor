@page "/password"
@inject IPlcService PlcService
@inject IOtpService OtpService

<PageTitle>PLC Smart Lock | Password Config</PageTitle>

<div class="grid-center-items">

    <div class="grid-center-items">
        <h2>PLC 密码配置</h2>
    </div>

    <MDivider></MDivider>

    <MContainer Fluid>

        <!-- OTP 状态 -->
        <ConfigurationRow Label="OTP 状态">
            <MTextField Disabled
                        Label="OTP STATUS"
                        Value="@OtpStatusString">
            </MTextField>
        </ConfigurationRow>

        <!-- OTP 开关 -->

        <ConfigurationRow Label="关闭 OTP">
            <MButton Disabled="@OtpStatusInverted"
                     Color="error"
                     Large>
                关闭
            </MButton>
        </ConfigurationRow>

        <ConfigurationRow Label="开启 OTP">
            <MButton Disabled="@_otpStatus"
                     Color="success"
                     OnClick="EnableOtpButtonClicked"
                     Large>
                开启
            </MButton>
        </ConfigurationRow>

        <ConfigurationRow Label="更改静态密码">
            <MButton Color="primary"
                     Large>
                更改密码
            </MButton>
       </ConfigurationRow>

    </MContainer>

</div>

@code
{
    private bool _otpStatus;

    private bool OtpStatusInverted => !_otpStatus;
    private string OtpStatusString => _otpStatus ? "Enabled" : "Disabled";


    protected override async Task OnInitializedAsync()
    {
        await UpdateOtpStatus();
    }

    private async Task UpdateOtpStatus()
    {
        _otpStatus = (await PlcService.ReadOtpStatus())?.OtpEnabled == 1;
    }

    private async Task EnableOtpButtonClicked()
    {
        var code = OtpService.GenerateOtpKey();
        await PlcService.WriteOtpKey(new OtpKey { OtpKeyArray = code });
        await PlcService.WriteOtpStatus(new OtpStatus { OtpEnabled = 1 });
        await UpdateOtpStatus();
    }
}
