@page "/password"
@using OtpNet
@inject IPlcService PlcService
@inject IOtpService OtpService
@inject IQrCodeService QrCodeService

<PageTitle>PLC Smart Lock | Password Config</PageTitle>

<div class="grid-center-items">

    <div class="grid-center-items">
        <h2>PLC 密码配置</h2>
    </div>

    <MDivider></MDivider>

    <MContainer Fluid>

        <MAlert @bind-Value="_alertVisible"
                Prominent
                Dismissible
                Type="AlertTypes.Error"
                CloseLabel="Close Alert"
                Transition="scroll-y-transition">
            <MRow Align="@AlignTypes.Center">
                <MCol Class="grow">
                    <strong>@_alertValue</strong>
                </MCol>
            </MRow>
        </MAlert>

        <!-- OTP 状态 -->
        <ConfigurationRow Label="OTP 状态">
            <MTextField Disabled
                        Label="OTP STATUS"
                        Value="@OtpStatusString">
            </MTextField>
        </ConfigurationRow>

        <!-- OTP 开关 -->

        <ConfigurationRow Label="关闭 OTP">
            <MButton Disabled="OtpStatusInverted"
                     Color="error"
                     OnClick="DisableOtpButtonPressed"
                     Large>
                关闭
            </MButton>
        </ConfigurationRow>

        <ConfigurationRow Label="开启 OTP">
            <MButton Disabled="@_otpStatus"
                     Color="success"
                     OnClick="EnableOtpButtonPressed"
                     Large>
                开启
            </MButton>
        </ConfigurationRow>

        <!-- 修改密码 -->
        <ConfigurationRow Label="更改静态密码">
            <MButton Color="primary"
                     OnClick="ChangePasswordButtonPressed"
                     Large>
                更改密码
            </MButton>
        </ConfigurationRow>

    </MContainer>

        <MContainer>
        <!-- 关闭 OTP 密码对话框 -->
        <MRow Justify="@JustifyTypes.Center">
            <MDialog @bind-Value="_otpVerificationDialog"
                     Persistent
                     MaxWidth="290">
                <ChildContent>
                    <MCard>
                        <MCardTitle>
                            请输入当前 OTP 密码
                        </MCardTitle>
                        <MCardText>
                            <MRow Justify="@JustifyTypes.Center">
                                <MTextField @bind-Value="_otpVerificationInput"
                                            Label="OTP 密码"
                                            OnFocus="() => _otpVerificationPassError = false"
                                            Rules="DigitalInputVerifications">
                                </MTextField>
                            </MRow>
                            <MRow Justify="@JustifyTypes.Center">
                                @if (_otpVerificationPassError)
                                {
                                    <span style="color: red">密码错误</span>
                                }
                            </MRow>
                        </MCardText>
                        <MCardActions>
                            <MSpacer></MSpacer>
                            <MButton Color="primary"
                                     OnClick="DisableOtpDialogCancelButtonPressed"
                                     Large>
                                取消
                            </MButton>
                            <MButton Color="success"
                                     OnClick="DisableOtpDialogOkButtonPressed"
                                     Large>
                                提交
                            </MButton>
                        </MCardActions>
                    </MCard>
                </ChildContent>
            </MDialog>
        </MRow>
        <!-- 开启 OTP 密码对话框 -->
        <MRow Justify="JustifyTypes.Center">
            <MDialog @bind-Value="_otpEnableDialog"
                     Persistent
                     MaxWidth="512">
                <ChildContent>
                    <MCard>
                        <MCardTitle>
                            开启 OTP
                        </MCardTitle>
                        <MContainer>
                            <MCardText>
                                <MRow Justify="@JustifyTypes.Center">
                                    请使用 Google Authenticator 或 Microsoft Authenticator 等 OTP 密码管理软件扫描以下二维码，然后将 OTP 密码输入下方输入框中
                                </MRow>
                                <MRow Justify="@JustifyTypes.Center">
                                    <MImage @bind-Src="@_otpQrCode"></MImage>
                                </MRow>
                                <MRow Justify="@JustifyTypes.Center">
                                    <MTextField @bind-Value="_otpEnableInput"
                                                Label="当前 OTP 密码"
                                                OnFocus="() => _otpEnablePassError = false"
                                                Rules="DigitalInputVerifications">
                                    </MTextField>
                                </MRow>
                                <MRow Justify="@JustifyTypes.Center">
                                    @if (_otpEnablePassError)
                                    {
                                        <span style="color: red">密码错误</span>
                                    }
                                </MRow>
                            </MCardText>
                        </MContainer>
                        <MCardActions>
                            <MSpacer></MSpacer>
                            <MButton Color="primary"
                                     OnClick="EnableOtpDialogCancelButtonPressed"
                                     Large>
                                取消
                            </MButton>
                            <MButton Color="success"
                                     OnClick="EnableOtpDialogOkButtonPressed"
                                     Large>
                                提交
                            </MButton>
                        </MCardActions>
                    </MCard>
                </ChildContent>
            </MDialog>
        </MRow>
        <!-- 修改密码对话框 -->
        <MRow Justify="JustifyTypes.Center">
            <MDialog @bind-Value="_changePasswordDialog"
                     Persistent
                     MaxWidth="512">
                <ChildContent>
                    <MCard>
                        <MCardTitle>
                            修改静态密码
                        </MCardTitle>
                        <MCardText>
                            <!-- 当前密码 -->
                            <MContainer Fluid>
                                <MRow Justify="@JustifyTypes.Center">
                                    <MCol>
                                        <MTextField @bind-Value="_changePasswordDigitalOld"
                                                    Label="当前数字密码"
                                                    Outlined
                                                    AppendIcon="@(_changePasswordShowDetail ? "mdi-eye" : "mdi-eye-off")"
                                                    Type="@(_changePasswordShowDetail ? "text" : "password")"
                                                    OnAppendClick="() => _changePasswordShowDetail = !_changePasswordShowDetail"
                                                    OnFocus="() => _changePasswordError = false"
                                                    Rules="DigitalInputVerifications">
                                        </MTextField>
                                    </MCol>
                                </MRow>
                                <MRow Justify="@JustifyTypes.Center">
                                    <MCol Cols="12" Md="6">
                                        <MTextField @bind-Value="_changePasswordAnalogOldLow"
                                                    Label="当前模拟下限"
                                                    Outlined
                                                    AppendIcon="@(_changePasswordShowDetail ? "mdi-eye" : "mdi-eye-off")"
                                                    Type="@(_changePasswordShowDetail ? "text" : "password")"
                                                    OnAppendClick="() => _changePasswordShowDetail = !_changePasswordShowDetail"
                                                    OnFocus="() => _changePasswordError = false"
                                                    Rules="AnalogInputVerifications">
                                        </MTextField>
                                    </MCol>
                                    <MCol Cols="12" Md="6">
                                        <MTextField @bind-Value="_changePasswordAnalogOldUp"
                                                    Label="当前模拟上限"
                                                    Outlined
                                                    AppendIcon="@(_changePasswordShowDetail ? "mdi-eye" : "mdi-eye-off")"
                                                    Type="@(_changePasswordShowDetail ? "text" : "password")"
                                                    OnAppendClick="() => _changePasswordShowDetail = !_changePasswordShowDetail"
                                                    OnFocus="() => _changePasswordError = false"
                                                    Rules="AnalogInputVerifications">
                                        </MTextField>
                                    </MCol>
                                </MRow>
                            </MContainer>
                            <MDivider></MDivider>
                            <!-- 新密码 -->
                            <MContainer Fluid>
                                <MRow Justify="@JustifyTypes.Center">
                                    <MCol>
                                        <MTextField @bind-Value="_changePasswordDigitalNew"
                                                    Outlined
                                                    AppendIcon="@(_changePasswordShowDetail ? "mdi-eye" : "mdi-eye-off")"
                                                    Type="@(_changePasswordShowDetail ? "text" : "password")"
                                                    OnAppendClick="() => _changePasswordShowDetail = !_changePasswordShowDetail"
                                                    Label="新数字密码"
                                                    OnFocus="() => _changePasswordError = false"
                                                    Rules="DigitalInputVerifications">
                                        </MTextField>
                                    </MCol>
                                </MRow>
                                <MRow Justify="@JustifyTypes.Center">
                                    <MCol Cols="12" Md="6">
                                        <MTextField @bind-Value="_changePasswordAnalogNewLow"
                                                    Outlined
                                                    AppendIcon="@(_changePasswordShowDetail ? "mdi-eye" : "mdi-eye-off")"
                                                    Type="@(_changePasswordShowDetail ? "text" : "password")"
                                                    OnAppendClick="() => _changePasswordShowDetail = !_changePasswordShowDetail"
                                                    Label="新模拟下限"
                                                    OnFocus="() => _changePasswordError = false"
                                                    Rules="AnalogInputVerifications">
                                        </MTextField>
                                    </MCol>
                                    <MCol Cols="12" Md="6">
                                        <MTextField @bind-Value="_changePasswordAnalogNewUp"
                                                    Outlined
                                                    AppendIcon="@(_changePasswordShowDetail ? "mdi-eye" : "mdi-eye-off")"
                                                    Type="@(_changePasswordShowDetail ? "text" : "password")"
                                                    OnAppendClick="() => _changePasswordShowDetail = !_changePasswordShowDetail"
                                                    Label="新模拟上限"
                                                    OnFocus="() => _changePasswordError = false"
                                                    Rules="AnalogInputVerifications">
                                        </MTextField>
                                    </MCol>
                                </MRow>
                            </MContainer>
                            <MDivider></MDivider>
                            <!-- 新密码重复 -->
                            <MContainer Fluid>
                                <MRow Justify="@JustifyTypes.Center">
                                    <MCol>
                                        <MTextField @bind-Value="_changePasswordDigitalRepeat"
                                                    Label="新数字密码 重复"
                                                    Outlined
                                                    AppendIcon="@(_changePasswordShowDetail ? "mdi-eye" : "mdi-eye-off")"
                                                    Type="@(_changePasswordShowDetail ? "text" : "password")"
                                                    OnAppendClick="() => _changePasswordShowDetail = !_changePasswordShowDetail"
                                                    OnFocus="() => _changePasswordError = false"
                                                    Rules="DigitalInputVerifications">
                                        </MTextField>
                                    </MCol>
                                </MRow>
                                <MRow Justify="@JustifyTypes.Center">
                                    <MCol Cols="12" Md="6">
                                        <MTextField @bind-Value="_changePasswordAnalogRepeatLow"
                                                    Label="新模拟下限 重复"
                                                    Outlined
                                                    AppendIcon="@(_changePasswordShowDetail ? "mdi-eye" : "mdi-eye-off")"
                                                    Type="@(_changePasswordShowDetail ? "text" : "password")"
                                                    OnAppendClick="() => _changePasswordShowDetail = !_changePasswordShowDetail"
                                                    OnFocus="() => _changePasswordError = false"
                                                    Rules="AnalogInputVerifications">
                                        </MTextField>
                                    </MCol>
                                    <MCol Cols="12" Md="6">
                                        <MTextField @bind-Value="_changePasswordAnalogRepeatUp"
                                                    Label="新模拟上限 重复"
                                                    Outlined
                                                    AppendIcon="@(_changePasswordShowDetail ? "mdi-eye" : "mdi-eye-off")"
                                                    Type="@(_changePasswordShowDetail ? "text" : "password")"
                                                    OnAppendClick="() => _changePasswordShowDetail = !_changePasswordShowDetail"
                                                    OnFocus="() => _changePasswordError = false"
                                                    Rules="AnalogInputVerifications">
                                        </MTextField>
                                    </MCol>
                                </MRow>
                            </MContainer>
                            <MRow Justify="@JustifyTypes.Center">
                                @if (_changePasswordError)
                                {
                                    <span style="color: red">@_changePasswordErrorMessage</span>
                                }
                            </MRow>
                        </MCardText>
                        <MCardActions>
                            <MSpacer></MSpacer>
                            <MButton Color="primary"
                                     OnClick="ChangePasswordDialogCancelButtonPressed"
                                     Large>
                                取消
                            </MButton>
                            <MButton Color="success"
                                     OnClick="ChangePasswordDialogOkButtonPressed"
                                     Large>
                                提交
                            </MButton>
                        </MCardActions>
                    </MCard>
                </ChildContent>
            </MDialog>
        </MRow>
    </MContainer>

</div>

@code
{
    private bool _otpStatus;

    private bool OtpStatusInverted => !_otpStatus;
    private string OtpStatusString => _otpStatus ? "Enabled" : "Disabled";

    #region 输入校验

    private readonly Func<string?, StringBoolean> _digitalInputCharacterVerification = value =>
    {
        if (string.IsNullOrEmpty(value))
        {
            return "不可为空";
        }
        return value.All(s => s is >= '0' and <= '9') ? true : "密码仅为数字";
    };

    private readonly Func<string?, StringBoolean> _digitalInputLengthVerification = value =>
    {
        if (string.IsNullOrEmpty(value))
        {
            return "不可为空";
        }
        return value.Length != 6 ? "密码为 6 位" : true;
    };

    private readonly Func<string?, StringBoolean> _analogSizeVerification = value =>
    {
        if (string.IsNullOrEmpty(value))
        {
            return "不可为空";
        }
        return ushort.TryParse(value, out _) ? true : "超出长度限制";
    };

    private IEnumerable<Func<string?, StringBoolean>> DigitalInputVerifications => new List<Func<string?, StringBoolean>>
    {
        _digitalInputCharacterVerification,
        _digitalInputLengthVerification
    };

    private IEnumerable<Func<string?, StringBoolean>> AnalogInputVerifications => new List<Func<string?, StringBoolean>>
    {
        _digitalInputCharacterVerification,
        _analogSizeVerification
    };

    #endregion

    #region OTP 开启和关闭 私有成员

    private bool _otpVerificationDialog;
    private bool _otpEnableDialog;
    private bool _otpVerificationPassError;
    private bool _otpEnablePassError;
    private string? _otpVerificationInput;
    private string? _otpEnableInput;
    private string? _otpQrCode;
    private byte[]? _otpCode;

    private bool _alertVisible;
    private string? _alertValue;

    #endregion

    #region 修改密码 私有成员

    private bool _changePasswordDialog;
    private bool _changePasswordShowDetail;
    private bool _changePasswordError;
    private string? _changePasswordErrorMessage;
    private string? _changePasswordDigitalOld;
    private string? _changePasswordDigitalNew;
    private string? _changePasswordDigitalRepeat;
    private string? _changePasswordAnalogOldUp;
    private string? _changePasswordAnalogNewUp;
    private string? _changePasswordAnalogRepeatUp;
    private string? _changePasswordAnalogOldLow;
    private string? _changePasswordAnalogNewLow;
    private string? _changePasswordAnalogRepeatLow;

    #endregion

    protected override async Task OnInitializedAsync()
    {
        await UpdateOtpStatus();
    }

    private async Task UpdateOtpStatus()
    {
        _otpStatus = (await PlcService.ReadOtpStatus())?.OtpEnabled == 1;
    }

    #region OTP 按钮

    private void EnableOtpButtonPressed()
    {
        if (PlcService.GetPlcConnectionStatus() is false)
        {
            Alert("PLC 未连接");
            return;
        }
        _otpCode = OtpService.GenerateOtpKey();

        var key = Base32Encoding.ToString(_otpCode);
        var url = $"otpauth://totp/PLC%20Manager?secret={key}&issuer=PLC%20Smart%20Lock";
        var qrCode = QrCodeService.GetQrCodeBase64(url, 32);
        var pngBase64 = $"data:image/png;base64,{qrCode}";
        _otpQrCode = pngBase64;

        _otpEnableDialog = true;
    }

    private void DisableOtpButtonPressed()
    {
        if (PlcService.GetPlcConnectionStatus() is false)
        {
            Alert("PLC 未连接");
            return;
        }
        _otpVerificationInput = "";
        _otpVerificationDialog = true;
    }

    private async Task EnableOtpDialogOkButtonPressed()
    {
        if (OtpService.Verify(_otpEnableInput) is false)
        {
            _otpEnablePassError = true;
            return;
        }

        if (_otpCode is null)
        {
            Alert("OTP Key 为 Null");
            EnableOtpDialogCancelButtonPressed();
            return;
        }
        var status = await PlcService.WriteOtpKey(new OtpKey { OtpKeyArray = _otpCode });

        if (status is false)
        {
            Alert("将 OTP Key 写入 PLC 失败");
            EnableOtpDialogCancelButtonPressed();
            return;
        }

        status = await PlcService.WriteOtpStatus(new OtpStatus { OtpEnabled = 1 });

        if (status is false)
        {
            Alert("开启 PLC OTP 模式失败");
            EnableOtpDialogCancelButtonPressed();
            return;
        }

        await UpdateOtpStatus();
        EnableOtpDialogCancelButtonPressed();
    }

    private void EnableOtpDialogCancelButtonPressed()
    {
        _otpCode = null;
        _otpEnableInput = "";
        _otpEnableDialog = false;
    }

    private async Task DisableOtpDialogOkButtonPressed()
    {
        if (OtpService.Verify(_otpVerificationInput) is false)
        {
            _otpVerificationPassError = true;
            return;
        }

        var status = await PlcService.WriteOtpStatus(new OtpStatus { OtpEnabled = 0 });
        if (status is false)
        {
            Alert("关闭 PLC OTP 模式失败");
            DisableOtpDialogCancelButtonPressed();
            return;
        }

        await UpdateOtpStatus();
        DisableOtpDialogCancelButtonPressed();
    }

    private void DisableOtpDialogCancelButtonPressed()
    {
        _otpVerificationInput = "";
        _otpVerificationDialog = false;
    }

    #endregion

    #region 修改密码按钮

    private void ChangePasswordButtonPressed()
    {
        _changePasswordErrorMessage = "";
        _changePasswordDigitalOld = "";
        _changePasswordDigitalNew = "";
        _changePasswordDigitalRepeat = "";
        _changePasswordAnalogOldUp = "";
        _changePasswordAnalogNewUp = "";
        _changePasswordAnalogRepeatUp = "";
        _changePasswordAnalogOldLow = "";
        _changePasswordAnalogNewLow = "";
        _changePasswordAnalogRepeatLow = "";
        _changePasswordDialog = true;
    }

    private async Task ChangePasswordDialogOkButtonPressed()
    {
        var s1 = StaticPasswordVerify(_changePasswordDigitalOld, _changePasswordAnalogOldLow, _changePasswordAnalogOldUp);
        if (s1 is null)
        {
            return;
        }
        var s2 = StaticPasswordVerify(_changePasswordDigitalNew, _changePasswordAnalogNewLow, _changePasswordAnalogNewUp);
        if (s2 is null)
        {
            return;
        }
        var s3 = StaticPasswordVerify(_changePasswordDigitalRepeat, _changePasswordAnalogRepeatLow, _changePasswordAnalogRepeatUp);
        if (s3 is null)
        {
            return;
        }

        var currentStaticPassword = await PlcService.ReadStaticPassword();
        if (currentStaticPassword is null)
        {
            _changePasswordErrorMessage = "从 PLC 读取密码失败";
            _changePasswordError = true;
            return;
        }

        if (currentStaticPassword.AreEqual(s1) is false)
        {
            _changePasswordErrorMessage = "当前密码错误";
            _changePasswordError = true;
            return;
        }

        if (s2.AreEqual(s3) is false)
        {
            _changePasswordErrorMessage = "新密码两次输入不一致";
            _changePasswordError = true;
            return;
        }

        var status = await PlcService.WriteStaticPassword(s2);
        if (status is false)
        {
            _changePasswordErrorMessage = "向 PLC 写入新密码失败";
            _changePasswordError = true;
            return;
        }

        ChangePasswordDialogCancelButtonPressed();
    }

    private void ChangePasswordDialogCancelButtonPressed()
    {
        _changePasswordDialog = false;
    }

    private StaticPassword? StaticPasswordVerify(string? digital, string? analogLow, string? analogHigh)
    {
        if (string.IsNullOrEmpty(digital) || string.IsNullOrEmpty(analogLow) || string.IsNullOrEmpty(analogHigh))
        {
            _changePasswordErrorMessage = "密码不能为空";
            _changePasswordError = true;
            return null;
        }

        if (_digitalInputCharacterVerification.Invoke(digital) != true ||
            _digitalInputCharacterVerification.Invoke(analogLow) != true ||
            _digitalInputCharacterVerification.Invoke(analogHigh) != true)
        {
            _changePasswordErrorMessage = "密码中含有非法字符";
            _changePasswordError = true;
            return null;
        }

        if (_digitalInputLengthVerification.Invoke(digital) != true ||
            _analogSizeVerification.Invoke(analogLow) != true ||
            _analogSizeVerification.Invoke(analogHigh) != true)
        {
            _changePasswordErrorMessage = "密码长度不正确";
            _changePasswordError = true;
            return null;
        }

        // ReSharper disable once InvertIf
        if (ushort.Parse(analogLow) >= ushort.Parse(analogHigh))
        {
            _changePasswordErrorMessage = "模拟密码大小不正确";
            _changePasswordError = true;
            return null;
        }

        return new StaticPassword
        {
            StaticPassword1 = ushort.Parse(digital[0].ToString()),
            StaticPassword2 = ushort.Parse(digital[1].ToString()),
            StaticPassword3 = ushort.Parse(digital[2].ToString()),
            StaticPassword4 = ushort.Parse(digital[3].ToString()),
            StaticPassword5 = ushort.Parse(digital[4].ToString()),
            StaticPassword6 = ushort.Parse(digital[5].ToString()),
            StaticPasswordAnalogHigh = ushort.Parse(analogHigh),
            StaticPasswordAnalogLow = ushort.Parse(analogLow)
        };
    }

    #endregion

    private void Alert(string message)
    {
        _alertValue = message;
        _alertVisible = true;
    }
}
