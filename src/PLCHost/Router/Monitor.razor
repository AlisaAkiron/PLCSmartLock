@page "/monitor"
@using System.Timers
@inject IPlcService PlcService
@inject IOtpService OtpService

<PageTitle>PLC Smart Lock | Monitor</PageTitle>

<div class="grid-center-items">

    <div class="align-middle-items">
        <h2>PLC 监控</h2>
    </div>

    <MDivider></MDivider>

    <MContainer Fluid>

        <!-- 当前输入 数字密码 -->
        <MRow>

            <MCol Cols="1"></MCol>
            <MCol>
                <h3>当前输入值 (数字):</h3>
            </MCol>

        </MRow>
        <MRow>
            <MCol Cols="2">
                <MCard Class="mx-auto">
                    <MCardTitle Class="center-card-title">@DigitalPassword1</MCardTitle>
                </MCard>
            </MCol>
            <MCol Cols="2">
                <MCard Class="mx-auto">
                    <MCardTitle Class="center-card-title">@DigitalPassword2</MCardTitle>
                </MCard>
            </MCol>
            <MCol Cols="2">
                <MCard Class="mx-auto">
                    <MCardTitle Class="center-card-title">@DigitalPassword3</MCardTitle>
                </MCard>
            </MCol>
            <MCol Cols="2">
                <MCard Class="mx-auto">
                    <MCardTitle Class="center-card-title">@DigitalPassword4</MCardTitle>
                </MCard>
            </MCol>
            <MCol Cols="2">
                <MCard Class="mx-auto">
                    <MCardTitle Class="center-card-title">@DigitalPassword5</MCardTitle>
                </MCard>
            </MCol>
            <MCol Cols="2">
                <MCard Class="mx-auto">
                    <MCardTitle Class="center-card-title">@DigitalPassword6</MCardTitle>
                </MCard>
            </MCol>

        </MRow>

        <!-- 当前输入 模拟密码 -->
        <MRow>

            <MCol Cols="1"></MCol>
            <MCol>
                <h3>当前输入值 (模拟):</h3>
            </MCol>
        </MRow>
        <MRow Justify="JustifyTypes.Center">
            <MCol>
                <MCard Class="mx-auto">
                    <MCardTitle Class="center-card-title">@AnalogPassword</MCardTitle>
                </MCard>
            </MCol>
        </MRow>

    </MContainer>

    <MDivider></MDivider>

    <MContainer Fluid>

        <!-- 当前 OTP 密码 -->
        <MRow>

            <MCol Cols="1"></MCol>
            <MCol>
                <h3>OTP 密码 (剩余 @OtpRemainingTime 秒):</h3>
            </MCol>
        </MRow>
        <MRow>
            <MCol Cols="2">
                <MCard Class="mx-auto">
                    <MCardTitle Class="center-card-title">@OtpPassword1</MCardTitle>
                </MCard>
            </MCol>
            <MCol Cols="2">
                <MCard Class="mx-auto">
                    <MCardTitle Class="center-card-title">@OtpPassword2</MCardTitle>
                </MCard>
            </MCol>
            <MCol Cols="2">
                <MCard Class="mx-auto">
                    <MCardTitle Class="center-card-title">@OtpPassword3</MCardTitle>
                </MCard>
            </MCol>
            <MCol Cols="2">
                <MCard Class="mx-auto">
                    <MCardTitle Class="center-card-title">@OtpPassword4</MCardTitle>
                </MCard>
            </MCol>
            <MCol Cols="2">
                <MCard Class="mx-auto">
                    <MCardTitle Class="center-card-title">@OtpPassword5</MCardTitle>
                </MCard>
            </MCol>
            <MCol Cols="2">
                <MCard Class="mx-auto">
                    <MCardTitle Class="center-card-title">@OtpPassword6</MCardTitle>
                </MCard>
            </MCol>
        </MRow>

    </MContainer>

</div>

<style>
    .center-card-title {
        justify-content: center;
    }
</style>

@code
{
    private InputPassword _inputPassword = new()
    {
        DigitalInput1 = 10,
        DigitalInput2 = 10,
        DigitalInput3 = 10,
        DigitalInput4 = 10,
        DigitalInput5 = 10,
        DigitalInput6 = 10,
        AnalogInput = 0
    };

    private OtpPassword _otpPassword = new()
    {
        OtpPassword1 = 10,
        OtpPassword2 = 10,
        OtpPassword3 = 10,
        OtpPassword4 = 10,
        OtpPassword5 = 10,
        OtpPassword6 = 10,
    };
    private int _otpRemainingTime = -1;

    private string DigitalPassword1 => FormatDigitalPassword(_inputPassword.DigitalInput1);
    private string DigitalPassword2 => FormatDigitalPassword(_inputPassword.DigitalInput2);
    private string DigitalPassword3 => FormatDigitalPassword(_inputPassword.DigitalInput3);
    private string DigitalPassword4 => FormatDigitalPassword(_inputPassword.DigitalInput4);
    private string DigitalPassword5 => FormatDigitalPassword(_inputPassword.DigitalInput5);
    private string DigitalPassword6 => FormatDigitalPassword(_inputPassword.DigitalInput6);
    private string AnalogPassword => _inputPassword.AnalogInput.ToString();

    private string OtpPassword1 => FormatDigitalPassword(_otpPassword.OtpPassword1);
    private string OtpPassword2 => FormatDigitalPassword(_otpPassword.OtpPassword2);
    private string OtpPassword3 => FormatDigitalPassword(_otpPassword.OtpPassword3);
    private string OtpPassword4 => FormatDigitalPassword(_otpPassword.OtpPassword4);
    private string OtpPassword5 => FormatDigitalPassword(_otpPassword.OtpPassword5);
    private string OtpPassword6 => FormatDigitalPassword(_otpPassword.OtpPassword6);
    private string OtpRemainingTime => _otpRemainingTime < 0 ? "NaN" : _otpRemainingTime.ToString();

    private static string FormatDigitalPassword(ushort dp)
    {
        return dp >= 10 ? "-" : dp.ToString();
    }

    private Timer? _timer;

    protected override void OnInitialized()
    {
        _timer = new Timer(500);

        _timer.Elapsed += async (_, _) =>
        {
            _inputPassword = await PlcService.ReadInputPassword() ?? _inputPassword;
            var otpStatus = await PlcService.ReadOtpStatus();
            if (otpStatus?.OtpEnabled is 0)
            {
                _otpPassword = new OtpPassword
                {
                    OtpPassword1 = 10,
                    OtpPassword2 = 10,
                    OtpPassword3 = 10,
                    OtpPassword4 = 10,
                    OtpPassword5 = 10,
                    OtpPassword6 = 10,
                };
                _otpRemainingTime = -1;
            }
            else
            {
                var (otpPassword, remainingTime) = OtpService.CalculatePassword();
                _otpPassword = otpPassword;
                _otpRemainingTime = remainingTime;
            }

            await InvokeAsync(StateHasChanged);
        };

        _timer.Start();
    }
}
